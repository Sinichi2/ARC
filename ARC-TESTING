{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport json #for json\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-06T12:59:43.711230Z","iopub.execute_input":"2025-05-06T12:59:43.711529Z","iopub.status.idle":"2025-05-06T12:59:43.718175Z","shell.execute_reply.started":"2025-05-06T12:59:43.711506Z","shell.execute_reply":"2025-05-06T12:59:43.717309Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/arc-prize-2025/arc-agi_training_solutions.json\n/kaggle/input/arc-prize-2025/arc-agi_evaluation_solutions.json\n/kaggle/input/arc-prize-2025/arc-agi_evaluation_challenges.json\n/kaggle/input/arc-prize-2025/sample_submission.json\n/kaggle/input/arc-prize-2025/arc-agi_training_challenges.json\n/kaggle/input/arc-prize-2025/arc-agi_test_challenges.json\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"training_challenges_path = '/kaggle/input/arc-prize-2025/arc-agi_training_challenges.json'\ntraining_solutions_path = '/kaggle/input/arc-prize-2025/arc-agi_training_solutions.json'\nevaluation_challenges_path = '/kaggle/input/arc-prize-2025/arc-agi_evaluation_challenges.json'\nevaluation_solutions_path = '/kaggle/input/arc-prize-2025/arc-agi_evaluation_solutions.json'\ntest_challenges_path = '/kaggle/input/arc-prize-2025/arc-agi_test_challenges.json'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-06T12:59:46.283749Z","iopub.execute_input":"2025-05-06T12:59:46.284043Z","iopub.status.idle":"2025-05-06T12:59:46.288699Z","shell.execute_reply.started":"2025-05-06T12:59:46.284018Z","shell.execute_reply":"2025-05-06T12:59:46.287923Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"with open(training_challenges_path, 'r') as f:\n    training_challenges = json.load(f)\n\nwith open(training_solutions_path, 'r') as f:\n    training_solutions = json.load(f)\n\nwith open(evaluation_challenges_path, 'r') as f:\n    evaluation_challenges = json.load(f)\n\nwith open(evaluation_solutions_path, 'r') as f:\n    evaluation_solutions = json.load(f)\n\nwith open(test_challenges_path, 'r') as f:\n    test_challenges = json.load(f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-06T12:59:47.574623Z","iopub.execute_input":"2025-05-06T12:59:47.574909Z","iopub.status.idle":"2025-05-06T12:59:48.094521Z","shell.execute_reply.started":"2025-05-06T12:59:47.574888Z","shell.execute_reply":"2025-05-06T12:59:48.093482Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# Number of tasks in each dataset\nprint(\"Number of training challenges:\", len(training_challenges))\nprint(\"Number of evaluation challenges:\", len(evaluation_challenges))\nprint(\"Number of test challenges:\", len(test_challenges))\n\n\ntask_id = list(training_challenges.keys())[0]\nprint(\"Example Training Task ID:\", task_id)\nprint(\"Task Structure:\", training_challenges[task_id])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-06T12:59:56.794284Z","iopub.execute_input":"2025-05-06T12:59:56.794657Z","iopub.status.idle":"2025-05-06T12:59:56.801047Z","shell.execute_reply.started":"2025-05-06T12:59:56.794631Z","shell.execute_reply":"2025-05-06T12:59:56.800092Z"}},"outputs":[{"name":"stdout","text":"Number of training challenges: 1000\nNumber of evaluation challenges: 120\nNumber of test challenges: 240\nExample Training Task ID: 00576224\nTask Structure: {'train': [{'input': [[7, 9], [4, 3]], 'output': [[7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3], [9, 7, 9, 7, 9, 7], [3, 4, 3, 4, 3, 4], [7, 9, 7, 9, 7, 9], [4, 3, 4, 3, 4, 3]]}, {'input': [[8, 6], [6, 4]], 'output': [[8, 6, 8, 6, 8, 6], [6, 4, 6, 4, 6, 4], [6, 8, 6, 8, 6, 8], [4, 6, 4, 6, 4, 6], [8, 6, 8, 6, 8, 6], [6, 4, 6, 4, 6, 4]]}], 'test': [{'input': [[3, 2], [7, 8]]}]}\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"task_id = list(training_challenges.keys())[0]\ntrain_input_output_pairs = training_challenges[task_id]['train']\ntest_input = training_challenges[task_id]['test']\n\n# Display the first training pair\nprint(\"Training Input:\")\nprint(np.array(train_input_output_pairs[0]['input']))\nprint(\"Expected Output:\")\nprint(np.array(train_input_output_pairs[0]['output']))\n\n# Display the test input\nprint(\"Test Input:\")\nprint(np.array(test_input[0]['input']))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-06T13:00:15.009058Z","iopub.execute_input":"2025-05-06T13:00:15.009418Z","iopub.status.idle":"2025-05-06T13:00:15.016363Z","shell.execute_reply.started":"2025-05-06T13:00:15.009393Z","shell.execute_reply":"2025-05-06T13:00:15.015378Z"}},"outputs":[{"name":"stdout","text":"Training Input:\n[[7 9]\n [4 3]]\nExpected Output:\n[[7 9 7 9 7 9]\n [4 3 4 3 4 3]\n [9 7 9 7 9 7]\n [3 4 3 4 3 4]\n [7 9 7 9 7 9]\n [4 3 4 3 4 3]]\nTest Input:\n[[3 2]\n [7 8]]\n","output_type":"stream"}],"execution_count":15}]}